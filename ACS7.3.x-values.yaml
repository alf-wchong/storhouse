# ACS 7.3.x values

externalPort: 443
externalProtocol: https
externalHost: <DNS_Address>
global:
  alfrescoRegistryPullSecrets: docker-registry-secret
  elasticsearch:
    alfrescoRegistryPullSecrets: docker-registry-secret
    host: <AmazonOpenSearchAddress> 
    port: 443
    protocol: https
    user: <AmazonOpenSearchUsername>
    password: <AmazonOpenSearchPassword>
repository:
  replicaCount: 0
  image:
    tag: 7.3.0
  licenseSecret: acslicense
  startupProbe:
    periodSeconds: 180
    failureThreshold: 10
  readinessProbe:
    initialDelaySeconds: 60
    periodSeconds: 180
    timeoutSeconds: 10
    failureThreshold: 6
  livenessProbe:
    initialDelaySeconds: 130
    periodSeconds: 180
    timeoutSeconds: 10

ooiService:
  replicaCount: 1
  image:
    tag: 1.1.3

msTeamsService:
  replicaCount: 1
  image:
    tag: 1.1.0

transformrouter:
  replicaCount: 1
  image:
    tag: 2.0.0
  resources:
    requests:
      memory: "512Mi"
    limits:
      memory: "512Mi"
    
s3connector:
  enabled: false

pdfrenderer:
  replicaCount: 1
  image:
    tag: 3.0.0
  readinessProbe:
    initialDelaySeconds: 120
  livenessProbe:
    initialDelaySeconds: 60

imagemagick:
  replicaCount: 1
  image:
    tag: 3.0.0
  readinessProbe:
    initialDelaySeconds: 120
  livenessProbe:
    initialDelaySeconds: 60

libreoffice:
  replicaCount: 1
  image:
    tag: 3.0.0
  readinessProbe:
    initialDelaySeconds: 120
  livenessProbe:
    initialDelaySeconds: 60

tika:
  replicaCount: 1
  image:
    tag: 3.0.0

transformmisc:
  replicaCount: 1
  image:
    tag: 3.0.0
  readinessProbe:
    initialDelaySeconds: 60
  livenessProbe:
    initialDelaySeconds: 60

aiTransformer:
  replicaCount: 1
  image:
    tag: 1.4.5
  readinessProbe:
    initialDelaySeconds: 60
  livenessProbe:
    initialDelaySeconds: 60

filestore:
  replicaCount: 1
  image:
    tag: 2.0.0
  readinessProbe:
    initialDelaySeconds: 60
  livenessProbe:
    initialDelaySeconds: 60

share:
  image:
    tag: 7.3.0

persistence:
  enabled: true
  baseSize: 50Gi  
  storageClass:
    enabled: true
    name: efs-sc
    accessModes:
      - ReadWriteMany
  existingClaim: "alfresco-volume-claim"      
activemq:
  enabled: false  
messageBroker: &acs_messageBroker
  url: ssl://<AmazonMQOpenWireAddress>:<AmazonMQOpenWirePort>
  user: <AmazonMQUsernam>
  password: <AmazonMQPassword>

alfresco-search:
  enabled: false

alfresco-elasticsearch-connector:
  enabled: true
  liveIndexing:
    mediation:
      replicaCount: 0
      image:
        tag: 3.2.0
    content:
      replicaCount: 0
      image:
        tag: 3.2.0
    metadata:
      replicaCount: 0
      image:
        tag: 3.2.0
    path:
      replicaCount: 0
      image:
        tag: 3.2.0
  reindexing:
    enabled: true
    postgresql:
      url: jdbc:postgresql://<AuroraPostgresWriterEndpointName>:<AuroraPostgresWriterEndpointPort>/
      user: <AuroraPostgresAdminName>
      password: <AuroraPostgresAdminPassword>

alfresco-digital-workspace:
  enabled: true
  image:
    tag: 3.1.0
  resources:
# https://github.com/aws/amazon-cloudwatch-agent/issues/580
# For Fargate the requests and limits MUST be the same.
    limits:
      cpu: 1
      memory: 1024Mi
    requests:
      cpu: 1
      memory: 1024Mi

postgresql:
  enabled: false
  image:
    tag: 13.3.0

postgresql-syncservice:
  enabled: false
  image:
    tag: 13.3.0
database:
  external: true
  driver: org.postgresql.Driver
  url: jdbc:postgresql://<AuroraPostgresWriterEndpointName>:<AuroraPostgresWriterEndpointPort>/
  user: <AuroraPostgresAdminName>
  password: <AuroraPostgresAdminPassword>

alfresco-sync-service:
  syncservice:
    enabled: false
    image:
    tag: 3.8.0
  messageBroker:
    url: ssl://<AmazonMQOpenWireAddress>:<AmazonMQOpenWirePort>
    user: <AmazonMQUsernam>
    password: <AmazonMQPassword>

